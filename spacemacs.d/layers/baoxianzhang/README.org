#+TITLE: baoxianzhang layer

# TOC links should be GitHub style anchors.
* Table of Contents                                        :TOC_4_gh:noexport:
- [[#description][Description]]
- [[#install][Install]]
- [[#key-bindings][Key bindings]]
- [[#configuration][Configuration]]
  - [[#c-c][c-c++]]
    - [[#build-ccls][Build ccls]]
    - [[#project-setup][Project Setup]]
  - [[#shell][shell]]
  - [[#chinese][chinese]]
- [[#good-doc][Good doc]]

* Description
This layer does my personal additional layer. This layer is the main layer, which
include other layers. Please see the layers.el for details.

* Install
To use this configuration layer, add it to your =~/.spacemacs=. You will need to
add =baoxianzhang= to the existing =dotspacemacs-configuration-layers= list in this
file.

* Key bindings

| Key Binding | Description    |
|-------------+----------------|
| ~SPC x x x~ | Does thing01   |

* Configuration
** c-c++
Use lsp-ccls backend. This is currently the most fully featured implementation, including semantic highlighting and some navigation/ introspection features that are not provided by clangd.

#+BEGIN_SRC emacs-lisp
  (c-c++ :variables
         c-c++-backend 'lsp-ccls
         c-c++-adopt-subprojects t
         c-c++-lsp-enable-semantic-highlight 'rainbow
         c-c++-dap-adapters '(dap-lldb dap-cpptools)
         c-c++-default-mode-for-headers 'c++-mode
         c-c++-enable-organize-includes-on-save t
         c-c++-enable-clang-format-on-save t
         c-c++-enable-auto-newline t
         c-c++-default-mode-for-headers 'c++-mode
         c-c++-enable-organize-includes-on-save t
         c-c++-enable-clang-format-on-save t
         ccls-initialization-options `(:compilationDatabaseDirectory "build")
         projectile-require-project-root t
         )
#+END_SRC

*** [[ ][Build ccls]]
In ubuntu 16.04:
#+BEGIN_SRC sh
  https://snapcraft.io/install/ccls/ubuntu
  https://www.cnblogs.com/zi-wang/p/12666557.html
#+END_SRC

#+BEGIN_SRC sh
  sudo apt install snapd
  sudo snap install ccls --classic
  # add the /snap/bin dir to $PATH
#+END_SRC

In ubuntu 18.04 or above:
#+BEGIN_SRC sh
  sudo apt-get install ccls
#+END_SRC
*** Project Setup
The first thing should compile the project use the cmake to let the ccls find the header and symbols.
#+BEGIN_SRC sh
  cd build
  cmake -DCMAKE_EXPORT_COMPILE_COMMANDS=YES ..
  cd ..
  ln -s build/compile_commands.json .
#+END_SRC

In the configuration line, it will automatically find the compile_command.json in the build folder.

#+BEGIN_SRC emacs-lisp
  ccls-initialization-options `(:compilationDatabaseDirectory "build")
#+END_SRC

If the emacs doesn't launch the ccls, just enter the `SPC-SPC lsp` command.

Ref:
https://emacs-china.org/t/ccls-0-20190823-3-released/10342/20

https://clangd.llvm.org/installation.html#project-setup


** shell
Here use the `vterm` for the power of the emacs vterm.

** chinese

Add the line in your shell config, e.g. ~/.zshrc.
#+BEGIN_SRC sh
  export LC_CTYPE=zh_CN.UTF-8
#+END_SRC


* Good doc

+ org-mode TODO
  https://orgmode.org/worg/org-tutorials/orgtutorial_dto.html


+ org-agenda calendar
  https://errickson.net/code/org_agenda_calendar.html
  *agenda calendar* key binding:
  f and b: Go forward or backwards in time.
  v followed by m, y or w: View a month, a year, or a week at a time respectively.
  .: Return to today.
  Enter: While your cursor is on an event, open that event in its original file.
  r: Rebuild the agenda (if youâ€™ve been editing files).
