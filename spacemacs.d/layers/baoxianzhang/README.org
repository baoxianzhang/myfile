#+TITLE: baoxianzhang layer

# TOC links should be GitHub style anchors.
* Table of Contents                                        :TOC_4_gh:noexport:
- [[#description][Description]]
- [[#install][Install]]
- [[#key-bindings][Key bindings]]
- [[#configuration][Configuration]]
  - [[#c-c][c-c++]]
    - [[#build-ccls][Build ccls]]
    - [[#project-setup][Project Setup]]
  - [[#shell][shell]]
  - [[#chinese][chinese]]
- [[#good-doc][Good doc]]
  - [[#org-mode][org-mode]]
- [[#good-command][Good Command]]
  - [[#remove-ctrl-m-characters-from-a-file-in-unix][Remove CTRL-M characters from a file in UNIX]]
  - [[#org-num-mode][org-num-mode]]
  - [[#vim-register][vim register]]
  - [[#export-from-org-to-markdown-in-spacemacs][Export from Org to Markdown in Spacemacs]]

* Description
This layer does my personal additional layer. This layer is the main layer, which
include other layers. Please see the layers.el for details.

* Install
To use this configuration layer, add it to your =~/.spacemacs=. You will need to
add =baoxianzhang= to the existing =dotspacemacs-configuration-layers= list in this
file.

* Key bindings

| Key Binding | Description  |
|-------------+--------------|
| C-o         | evil-jump-backward |

* Configuration
** c-c++
Use lsp-ccls backend. This is currently the most fully featured implementation, including semantic highlighting and some navigation/ introspection features that are not provided by clangd.

#+BEGIN_SRC emacs-lisp
  (c-c++ :variables
         c-c++-backend 'lsp-ccls
         c-c++-adopt-subprojects t
         c-c++-lsp-enable-semantic-highlight 'rainbow
         c-c++-dap-adapters '(dap-lldb dap-cpptools)
         c-c++-default-mode-for-headers 'c++-mode
         c-c++-enable-organize-includes-on-save t
         c-c++-enable-clang-format-on-save t
         c-c++-enable-auto-newline t
         c-c++-default-mode-for-headers 'c++-mode
         c-c++-enable-organize-includes-on-save t
         c-c++-enable-clang-format-on-save t
         ccls-initialization-options `(:compilationDatabaseDirectory "build")
         projectile-require-project-root t
         )
#+END_SRC

*** [[ ][Build ccls]]
In ubuntu 16.04:
#+BEGIN_SRC sh
  https://snapcraft.io/install/ccls/ubuntu
  https://www.cnblogs.com/zi-wang/p/12666557.html
#+END_SRC

#+BEGIN_SRC sh
  sudo apt install snapd
  sudo snap install ccls --classic
  # add the /snap/bin dir to $PATH
#+END_SRC

In ubuntu 18.04 or above:
#+BEGIN_SRC sh
  sudo apt-get install ccls
#+END_SRC
*** Project Setup
The first thing should compile the project use the cmake to let the ccls find the header and symbols.
#+BEGIN_SRC sh
  cd build
  cmake -DCMAKE_EXPORT_COMPILE_COMMANDS=YES ..
  cd ..
  ln -s build/compile_commands.json .
#+END_SRC

In the configuration line, it will automatically find the compile_command.json in the build folder.

#+BEGIN_SRC emacs-lisp
  ccls-initialization-options `(:compilationDatabaseDirectory "build")
#+END_SRC

If the emacs doesn't launch the ccls, just enter the `SPC-SPC lsp` command.

Ref:
https://emacs-china.org/t/ccls-0-20190823-3-released/10342/20

https://clangd.llvm.org/installation.html#project-setup

| Key Binding | Description    |
|-------------+----------------|
| ~C-o~     | evil-jump-backward |
| ~C-]~   | xref-find-definitions|


** shell
Here use the `vterm` for the power of the emacs vterm.

** chinese

Add the line in your shell config, e.g. ~/.zshrc.
#+BEGIN_SRC sh
  export LC_CTYPE=zh_CN.UTF-8
#+END_SRC

如果一个非 UTF-8 编码, 比如 GBK 编码的文件打开, 可能 Emacs 会乱码, 这时候 M-x revert-buffer-with-coding-system 选择 gbk 即可.

一般在 windows 下的文件，直接在 ubuntu 下的 emacs 打开也是没有问题。


* Good doc
** org-mode
+ org-mode TODO
  https://orgmode.org/worg/org-tutorials/orgtutorial_dto.html

+ org-agenda calendar
  https://errickson.net/code/org_agenda_calendar.html
  *agenda calendar* key binding:
  f and b: Go forward or backwards in time.
  v followed by m, y or w: View a month, a year, or a week at a time respectively.
  .: Return to today.
  Enter: While your cursor is on an event, open that event in its original file.
  r: Rebuild the agenda (if you’ve been editing files).


+ https://out-of-cheese-error.netlify.app/spacemacs-config#orgf1ff4d8

+ Good Spacemacs org
  SPC i s: helm-yas
  SHIFT ->: circle the TODO->DONE state
  SHIFT up/down : circle the priority A B C state
  SHIFT >/<: the calendar move month
  SHIFT up/down: the calendar move day
  on SCHEDULED TIME: use SHIFT up/down/left/right to change the date and time
  , s S: sort the time
  , s s: org-spars-tree, search the tag
  org-columns: e to change TODO or A
  CTRL+C CTRL+C: add tag
  https://www.bilibili.com/video/BV1tt411j7A5/
  
+ CTRL+h i: The Info.  SHIFT+Enter: enter link, and q to exit
  + CTRL+h i-> Org Guide, Org Mode, Emacs, Elisp, Emacs Lisp Intro
+ CTRL+h r: The info-emacs-manual
+ SPC+SPC org-info to read the org-mode manual
+ org-kanban: Ctrl+c Ctrl+c update the kanban
  https://asciinema.org/a/201532
shift, :mirrored, :match, :layout, :scope
configure-block
+ present
  https://geeksocket.in/posts/presentations-org-emacs/
+ column view
   C-c C-x C-c (org-columns)
   r or g on a columns view line (org-columns-redo)
   C-c C-x x org-dynamic-block-insert-dblock selected columnview
  https://brantou.github.io/2017/04/14/org-column-view-tutorial/
  S-left/right: cycle through possible value
             e: edit the value
             a: edit the list of possible values
             v: show the value in the minibuffer
  M-left/right: move the column to the left/right
           < >: narrow/widen the column width
+ gantt
https://orgmode.org/worg/org-tutorials/org-taskjuggler.html
org-taskjuggler-export
sudo apt install ruby
sudo gem install taskjuggler
sudo apt install tj3
tj3 xxx.tjp

installinstall
install
installinstall
* Good Command
** Remove CTRL-M characters from a file in UNIX
1. Go to the beginning of the document.
2. Type: M-x replace-string RET C-q C-m RET RET
where "RET" means <press the return key> and C-q and C-m mean <hold the CTRL key and press the m (or q) key>.

** org-num-mode

** vim register
https://blog.csdn.net/prike/article/details/79088791
https://www.jianshu.com/p/80bc31f096ba

#+BEGIN_SRC register
1. The unnamed register ""                                         缓存最后一次操作内容；
2. 10 numbered registers "0 to "9                                  缓存最近操作内容，复制与删除有别, "0寄存器缓存最近一次复制的内容，"1-"9缓存最近9次删除内容;
3. The small delete register "-                                    缓存行内删除内容;
4. 26 named registers "a to "z or "A to "Z                         指定时可用; 用小写字母引用有名寄存器，会覆盖该寄存器的原有内容。 用大写字母引用有名寄存器, 会将新内容添加到原有内容之后;
5. four read-only registers ":, "., "% and "#                      分别缓存最近命令、最近插入文本、当前文件名、当前交替文件名;
6. the expression register "=                                      用于执行表达式命令
7. The selection and drop registers "*, "+ and "~                  存取GUI选择文本，可用于与外部应用交互，使用前提为系统剪切板（clipboard）可用；
8. The black hole register "_                                      存取GUI选择文本，可用于与外部应用交互，使用前提为系统剪切板（clipboard）可用；
9. Last search pattern register "/                                 缓存最近的搜索模式;

:help registers                                                    官方文档
:reg                                                               查询一下目前寄存器的情况

如果想把当前单词复制到寄存器 a 中， 可以执行 "ayiw 。
把当前整行文本剪切到寄存器 b 中， 可以执行 "bdd 
#+END_SRC

** Export from Org to Markdown in Spacemacs
https://dev.to/roeeyn/export-from-org-to-markdown-in-spacemacs-1dab
