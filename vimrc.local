filetype off                      " vundle required 'off' 
filetype plugin indent on         " vundle required
set nocompatible                  " be iMproved, vundle required
"filetype plugin on                " 根据文件类型加载插件
"set guifont=DejaVu\ Sans\ Mono\ 11 "等宽字体
 set fileencodings=utf-8,ucs-bom,gb18030,gbk,gb2312,cp936
 set termencoding=utf-8
 set encoding=utf-8
 set guifont=YaHei\ Consolas\ Hybrid\ 12

set history=2000                  "记录历史行数2000
let g:syntastic_ignore_files=[".*\.py$"]
set autoindent
let autosave=1
set background=dark
colorscheme solarized
let g:rainbow_active = 1 "彩色括号
set nowrap " 取消换行
" 主题配置 solarized
let g:solarized_termcolors=256
let g:solarized_termtrans=1
let g:solarized_contrast="normal"
let g:solarized_visibility="normal"
" 配色方案
set background=dark
set t_Co=256
colorscheme solarized
" 总是显示状态栏
set laststatus=2
" 状态行高度为2(默认为1)
set cmdheight=2
" 显示光标当前位置
set ruler
" 开启行号显示
set number
" 高亮显示当前行/列
set cursorline
set cursorcolumn
""在状态栏显示正在输入的命令
set showcmd"
set winwidth=120
set magic                   " 设置魔术
set guioptions-=T           " 隐藏工具栏
set guioptions-=m           " 隐藏菜单栏
set shortmess=atI

" ---------- install Plugin --------------------
Plugin 'SirVer/ultisnips'
Plugin 'iamcco/mathjax-support-for-mkdp'    "公式显示
Plugin 'iamcco/markdown-preview.vim'        " markdown预览
Plugin 'Valloric/YouCompleteMe'             "代码补全插件
Plugin 'jalcine/cmake.vim'
Plugin 'pboettch/vim-cmake-syntax'
Plugin 'Chiel92/vim-autoformat'             "Format code with one button press
Plugin 'vim-scripts/DoxygenToolkit.vim'     " doxygen"
Plugin 'octol/vim-cpp-enhanced-highlight'
"Plugin 'lilydjwg/fcitx.vim'                  "命令模式兼容中文
"Plugin 'taketwo/vim-ros'                     "Vim with +python is required
Plugin 'derekwyatt/vim-fswitch'
Plugin 'derekwyatt/vim-protodef'
Plugin 'taglist.vim'
Plugin 'c.vim'
Plugin 'OmniCppComplete'
Plugin 'mizuchi/stl-syntax'
Plugin 'ybian/smartim' 
Plugin 'jbohren/roslaunch.vim'
Plugin 'ianva/vim-youdao-translater'
Plugin 'kana/vim-operator-user'
Plugin 'rhysd/vim-clang-format'

" 让配置变更立即生效
autocmd BufWritePost $MYVIMRC source $MYVIMRC

"设置标记一列的背景颜色和数字一行颜色一致
hi! link SignColumn   LineNr
hi! link ShowMarksHLl DiffAdd
hi! link ShowMarksHLu DiffChange

"" for error highlight，防止错误整行标红导致看不清
highlight clear SpellBad
highlight SpellBad term=standout ctermfg=1 term=underline cterm=underline
highlight clear SpellCap
highlight SpellCap term=underline cterm=underline
highlight clear SpellRare
highlight SpellRare term=underline cterm=underline
highlight clear SpellLocal
highlight SpellLocal term=underline cterm=underline


"---------------- airlinetheme --------"
let airlinetheme="light"

"------------------vim-airline---------------------
let g:airline#extensions#tabline#enabled = 1    "Automatically displays all buffers when there's only one tab open

"------------------EasyMotion------------------------------------"
let g:EasyMotion_smartcase = 1
"let g:EasyMotion_startofline = 0 " keep cursor colum when JK motion
map <Leader><leader>h <Plug>(easymotion-linebackward)
map <Leader><Leader>j <Plug>(easymotion-j)
map <Leader><Leader>k <Plug>(easymotion-k)
map <Leader><leader>l <Plug>(easymotion-lineforward)
" 重复上一次操作, 类似repeat插件, 很强大
map <Leader><leader>. <Plug>(easymotion-repeat)

"----------------NERDTREE -------------------------
" 在 vim 启动的时候默认开启 NERDTree（autocmd 可以缩写为 au）
"autocmd VimEnter * NERDTree     "当文件夹下文件很多时，载入费事
" 当打开 NERDTree 窗口时，自动显示 Bookmarks
let NERDTreeShowBookmarks=1


"-------------syntastic-------------"
" 设置错误符号
let g:syntastic_error_symbol='✗'
" 设置警告符号
let g:syntastic_warning_symbol='⚠'
" 是否在打开文件时检查
let g:syntastic_check_on_open=1
" 是否在保存文件后检查
let g:syntastic_check_on_wq=0
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*
let g:syntastic_cpp_compiler = 'clang++'
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
"高亮错误
let g:syntastic_enable_highlighting=0
"让syntastic支持C++11
let g:syntastic_cpp_compiler_options = '-std=c++11 -stdlib=libc++'


"-------------ctags------------------------
set tags+=~/.ctags/opencv
set tags+=~/.ctags/pcl
set tags+=~/.ctags/ros
set tags+=~/.ctags/eigen
set path+=/usr/include/pcl-1.7
set path+=/usr/include/opencv2
set path+=/opt/ros/kinetic/include
set path+=/usr/include/c++/5
autocmd BufEnter * silent! lcd %:p:h

"----------------vim-autoformat-------------------------
noremap <F3> :Autoformat<CR>     " "
let g:autoformat_autoindent = 0
let g:autoformat_retab = 0
let g:autoformat_remove_trailing_spaces = 1



"clang-format for formating cpp code
" map to <Leader>cf in C++ code
" 将.clangformat放在

let g:clang_format#detect_style_file  = 1
let g:clang_format#auto_format =1 
autocmd FileType c,cpp,objc nnoremap <buffer><Leader>cf :<C-u>ClangFormat<CR>
autocmd FileType c,cpp,objc vnoremap <buffer><Leader>cf :ClangFormat<CR>
"let g:autoformat_verbosemode = 1
"func FormatCode(style)
"  let firstline=line(".")
"  let lastline=line(".")
"  " Visual mode
"  if exists(a:firstline)
"    firstline = a:firstline
"    lastline = a:lastline
"  endif
"  let g:formatdef_clangformat = "'clang-format --lines='.a:firstline.':'.a:lastline.' --assume-filename='.bufname('%').' -style=" . a:style . "'"
"  let formatcommand = ":" . firstline . "," . lastline . "Autoformat"
"  exec formatcommand
"endfunc



"-------------doxygen--------------------------"
let g:DoxygenToolkit_briefTag_pre="\\brief  "
let g:DoxygenToolkit_paramTag_pre="\\param "
let g:DoxygenToolkit_returnTag="\\return   "
let g:DoxygenToolkit_authorName="guoleiming"
let g:DoxygenToolkit_licenseTag=""  " <-- !!! Does not end with "\<enter>"
let s:licenseTag = "Copyright(C) www.robosense.ai\<enter>"
let s:licenseTag = s:licenseTag . "2017 Suteng Innovation Technology Co., Ltd..\<enter>"
let s:licenseTag = s:licenseTag . "All right reserved\<enter>"
let s:licenseTag = s:licenseTag . "版权声明\<enter>"
let s:licenseTag = s:licenseTag . "速腾聚创公司对其发行的作品享有版权，受各国版权法及国际版权公约的保护。\<enter>"
let s:licenseTag = s:licenseTag . "对于上述版权内容，超越合理使用范畴、并未经本公司书面许可的使用行为，我公司均保留追究法律责任的权利。\<enter>"
let g:DoxygenToolkit_licenseTag = s:licenseTag
let g:doxygen_enhanced_color=1







"----------------markdown----------------------------"
"let g:instant_markdown_autostart = 1
let g:mkdp_path_to_chrome = "google-chrome"   " path to the chrome or the command to open chrome(or other modern browsers)
let g:mkdp_auto_start = 0             " set to 1, the vim will open the preview window once enter the markdown  buffer
let g:mkdp_auto_open = 0              " set to 1, the vim wh_while_loop auto open preview window when you edit the markdown file
let g:mkdp_auto_close = 0             " set to 1, the vim will auto close current preview window when change from markdown buffer to another buffer
let g:mkdp_refresh_slow = 0           " set to 1, the vim will just refresh markdown when save the buffer or leave from insert mode, default 0 is auto refresh markdown as you edit or move the cursor
let g:mkdp_command_for_global = 0
nmap <silent> <F8> <Plug>MarkdownPreview        " for normal mode
imap <silent> <F8> <Plug>MarkdownPreview        " for insert mode
nmap <silent> <F9> <Plug>StopMarkdownPreview    " for normal mode
imap <silent> <F9> <Plug>StopMarkdownPreview    " for insert mode


""vim-cpp-enhanced-highlight
augroup filetypedetect
    au BufRead,BufNewFile *.cc set filetype=cpp
augroup END
let g:cpp_class_scope_highlight = 1

let g:cpp_member_variable_highlight = 1
let g:cpp_class_decl_highlight = 1
let g:cpp_experimental_simple_template_highlight = 1
let g:cpp_experimental_template_highlight = 1
let g:cpp_concepts_highlight = 1
let g:cpp_no_function_highlight = 1


" youdao translater  有道词典
vnoremap <silent> <C-T> :<C-u>Ydv<CR>
nnoremap <silent> <C-T> :<C-u>Ydc<CR>
noremap <leader>yd :<C-u>Yde<CR>

xnoremap p pgvy   " 多次粘贴







